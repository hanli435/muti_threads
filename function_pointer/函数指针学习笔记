//参考：C++ premier plus

函数指针：


1.函数地址：函数的地址是存储器机器语言代码的内存的开始地址。
  1.1获取函数的地址：只要使用函数名即可
  
2.函数指针
  2.1声明函数指针：
    2.1.1：声明指向函数的指针时，必须指定指向的函数类型。这意味着声明应制定函数的返回类型和函数的特征标（参数列表）。
    也就是说，声明应像函数原型那样指出有关函数的信息。
      2.1.1.1：单个声明
      double (*pf) (int);//声明了一个参数为int，返回值为double的函数指针
      错误示例：double * pf(int);//声明了一个参数为int,返回值为double *的函数。
      2.1.1.2：批量声明
      double (*pa[3])(int)={f1,f2,f3};
    2.1.2：利用C++11的自动类型推断功能，简化函数指针的声明
      注意点：（1）自动类型推断只能用于单值初始化，而不能用于初始化列表
             （2）auto并不代表一个实际的类型声明，只是一个类型声明的”占位符“，使用auto声明的变量必须马上初始化，让编译器推断出他的实际类型，并在编译期间将auto占位符替换为真正的类型(类型推到发生在编译期间)。//http://c.biancheng.net/view/3718.html
      auto pb=pam;//单一函数指针。
      auto pb=pa;//pb指向函数指针
    2.1.3:利用typedef简化函数指针的声明
  2.2函数指针的赋值：正确声明函数指针后，便可以将对应函数的地址赋给它。
      注意点：函数的特征标和返回类型必须与指针相同，否则编译器将拒绝这种赋值。
      double pam(int);
      int ted(int);
      double (*pf) (int);
      pf=pam//correct
      pf=ted//incorrect
   2.3使用指针调用函数：
    加不加*都是正确的。
    (*pf)(int);
    pf(int);
